package com.zjp.java8.methodRefrence;

import java.io.PrintStream;
import java.util.Comparator;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import org.junit.Test;
/**
 * 方法引用的使用：
 * 1、使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用!
 * 
 * 2、方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用也是函数式接口的实例。
 * 
 * 3、使用格式：类(对象) :: 方法名
 * 
 * 4、具体分为如下的三种情况：
 *         情况一：对象 :: 非静态方法
 *         情况二：类::静态方法
 *         情况三：类::非静态方法
 * 5、方法引用使用的要求：接口中的抽象方法的形参列表和返回值类型与方法应用的形参列表和返回值类型相同(主要适用于情况一和情况二)
 * 
 * */
public class MethodRefTest {
	//情况一：对象 :: 非静态方法
	/**
	 * Consumer中的void accept(T t)
	 * PrintStream中的viod println(T t)
	 * 使用PrintStream中的println方法代替Consumer的Lambda体
	 * */
	@Test
	public void test01() {
		Consumer<String> con1 = str -> System.out.println(str);
		con1.accept("北京");
		System.out.println("*******************************");
		PrintStream ps = System.out;
		Consumer<String> con2 = ps :: println;
		con2.accept("beijing");
		
		Consumer<Integer> con3 = ps::println;
		con3.accept(50);
		
		
	}
	/**
	 * Supplier中的T get()
	 * Employee中的String getName()
	 *   使用Employee中的String getName()方法代替Supplier的Lambda体
	 * */
	@Test
	public void test02() {
		Employee e = new Employee(1, "Tom", 30, 30000);
		Supplier<String> sup1 = () -> e.getName();
		System.out.println(sup1.get());
		System.out.println("+++++++++++++++++++++");
		Supplier<String> sup2 = e::getName;
		System.out.println(sup2.get());
		
	}
	
	//情况二：类::静态方法
	/**
	 * Comparator中的int compare(o1,o2)
	 * Integer中的int compare(o1,o2)
	 * */
	@Test
	public void test03() {
		Comparator<Integer> com1 = (o1,o2) -> Integer.compare(o1, o2);
		System.out.println(com1.compare(12, 22));;
		System.out.println("+++++++++++++++++++++++++++++++++++++");
		Comparator<Integer> com2 = Integer::compare;
		System.out.println(com2.compare(12, 22));
	}
	/**
	 * Function中的R apply(T t)
	 * Math中的Long round(Double d)
	 * */
	@Test
	public void test04() {
		Function<Double,Long> fun1 = d -> Math.round(d);
		System.out.println(fun1.apply(20.22));
		System.out.println("++++++++++++++++++++++++++");
		Function<Double,Long> fun2 = Math::round;
		System.out.println(fun2.apply(20.22));
	}
	//情况三：类::非静态方法
	/**
	 * Comparator中的int compare(T t1,T t2)
	 * String 中的int t1.compateTo(t2)
	 * */
	@Test
	public void test05() {
		Comparator<String> com1 = (s1,s2) -> s1.compareTo(s2);
		System.out.println(com1.compare("abc", "bcd"));
		System.out.println("++++++++++++++++++++++++++");
		Comparator<String> com2 = String::compareTo;
		System.out.println(com2.compare("abc", "bcd"));
	}
	
	/**
	 * BiPredicate中的boolean test(T t1,T t2);
	 * String 中的boolean t1.equals(t2)
	 * 
	 * */
	@Test
	public void test06() {
		BiPredicate<String, String> pre1 = (s1,s2) -> s1.equals(s2);
		System.out.println(pre1.test("abc", "bcd"));
		System.out.println("++++++++++++++++++++++++++");
		BiPredicate<String, String> pre2 = String :: equals;
		System.out.println(pre2.test("abc", "bcd"));
	}
	
	/**
	 * Function中的R apply(T t)
	 * Employee中的String getName();
	 * */
	@Test
	public void test07() {
		Employee employee = new Employee(1,"Tom",25,10000);
		Function<Employee, String> func1 = e -> e.getName();
		System.out.println(func1.apply(employee));
		System.out.println("++++++++++++++++++++++++++");
		
		Function<Employee, String> func2 = Employee :: getName;
		System.out.println(func2.apply(employee));
	}
	
}
